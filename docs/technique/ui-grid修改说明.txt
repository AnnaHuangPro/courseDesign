          // Initialize the directive
          function init() {
            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);

            // Default canvasWidth to the grid width, in case we don't get any column definitions to calculate it from
            grid.canvasWidth = uiGridCtrl.grid.gridWidth;

            //p1:以下代码由徐传运2015-11-17增加，主要解决在表格在初始显示时有最小的大小
            //本代码在：directive('uiGrid')
            var height = gridUtil.elementHeight($elm);
            if(grid.options.minHeight)
            {
            	if( height <　grid.options.minHeight)
        		{
            		grid.autoAdjustGridHeight();
        		}
            }
            //p1
            
            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);;

            // If the grid isn't tall enough to fit a single row, it's kind of useless. Resize it to fit a minimum number of rows
            if (grid.gridHeight < grid.options.rowHeight && grid.options.enableMinHeightCheck) {
              autoAdjustHeight();
            }

            // Run initial canvas refresh
            grid.refreshCanvas(true);
          }
		  

 /**
   * @ngdoc function
   * @name redrawCanvas
   * @methodOf ui.grid.class:Grid
   * @description Redraw the rows and columns based on our current scroll position
   * @param {boolean} [rowsAdded] Optional to indicate rows are added and the scroll percentage must be recalculated
   *
   */
  Grid.prototype.redrawInPlace = function redrawInPlace(rowsAdded) {
    // gridUtil.logDebug('redrawInPlace');

    var self = this;

    for (var i in self.renderContainers) {
      var container = self.renderContainers[i];

      // gridUtil.logDebug('redrawing container', i);

      if (rowsAdded) {
        container.adjustRows(container.prevScrollTop, null);
        container.adjustColumns(container.prevScrollLeft, null);
      }
      else {
        container.adjustRows(null, container.prevScrolltopPercentage);
        container.adjustColumns(null, container.prevScrollleftPercentage);
      }
    }
    //p1:以下代码由徐传运2015-11-17增加，主要解决在表格在数据较多时不出滚动条
    //本代码在： Grid.prototype.redrawInPlace
    self.autoAdjustGridHeight();
  };
  
  //p1:以下代码由徐传运2015-11-17增加，主要解决在表格在数据较多时不出滚动条
  //本代码在： Grid.prototype.redrawInPlace
  Grid.prototype.autoAdjustGridHeight =function() {
	  var self = this;
      // Figure out the new height
      var contentHeight = self.options.minRowsToShow * self.options.rowHeight;
      var headerHeight = self.options.showHeader ? self.options.headerRowHeight : 0;
      var footerHeight = self.calcFooterHeight();
      
      var scrollbarHeight = 0;
      if (self.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
        scrollbarHeight = gridUtil.getScrollbarWidth();
      }

      var maxNumberOfFilters = 0;
      // Calculates the maximum number of filters in the columns
      angular.forEach(self.options.columnDefs, function(col) {
        if (col.hasOwnProperty('filter')) {
          if (maxNumberOfFilters < 1) {
              maxNumberOfFilters = 1;
          }
        }
        else if (col.hasOwnProperty('filters')) {
          if (maxNumberOfFilters < col.filters.length) {
              maxNumberOfFilters = col.filters.length;
          }
        }
      });

      if (self.options.enableFiltering) {
        var allColumnsHaveFilteringTurnedOff = self.options.columnDefs.every(function(col) {
          return col.enableFiltering === false;
        });

        if (!allColumnsHaveFilteringTurnedOff) {
          maxNumberOfFilters++;
        }
      }

      var filterHeight = maxNumberOfFilters * headerHeight;

      contentHeight = self.renderContainers.body.getCanvasHeight();
      
      var newHeight = headerHeight + contentHeight + footerHeight + scrollbarHeight + filterHeight;

      if(self.options.minHeight)
	  {
    	  newHeight =  newHeight < self.options.minHeight ? self.options.minHeight:newHeight;
	  }
      self.element.css('height', newHeight + 'px');

      self.gridHeight = gridUtil.elementHeight(self.element);
      
      
     //self.refresh();
    }