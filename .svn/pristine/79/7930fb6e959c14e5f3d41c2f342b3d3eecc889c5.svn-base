package ddd.simple.action.reportForm;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FilenameUtils;
import org.springframework.stereotype.Controller;

import ddd.base.annotation.Action;
import ddd.base.annotation.RequestMapping;
import ddd.base.docx4j.Docx4jGenerator;
import ddd.base.exception.DDDException;
import ddd.base.jxls.JxlsGenerator;
import ddd.base.jxls.TemplateGenerator;
import ddd.base.persistence.EntitySet;
import ddd.base.util.SpringContextUtil;
import ddd.simple.entity.attachment.Attachment;
import ddd.simple.entity.modelFile.ModelFile;
import ddd.simple.entity.modelFile.Report;
import ddd.simple.entity.reportForm.ReportForm;
import ddd.simple.service.attachment.AttachmentService;
import ddd.simple.service.modelFile.ModelFileService;
import ddd.simple.service.reportForm.ReportFormOutInterFace;
import ddd.simple.service.reportForm.ReportFormService;
import ddd.simple.service.workflow.outInterface.DisagreeHandleService;

@Action
@RequestMapping("/ReportForm")
@Controller
public class ReportFormAction
{
	@Resource(name = "reportFormServiceBean")
	private ReportFormService	reportFormService;
	
	@Resource(name = "attachmentServiceBean")
	private AttachmentService	attachmentService;
	
	@Resource(name = "modelFileServiceBean")
	private ModelFileService	modelFileService;
	
	public ReportForm saveReportForm(ReportForm reportForm)
	{
		try
		{
			ReportForm saveReportForm = this.reportFormService.saveReportForm(reportForm);
			return saveReportForm;
		} catch (DDDException e)
		{
			throw e;
		}
	}
	
	public int deleteReportForm(Long reportFormId)
	{
		
		try
		{
			return this.reportFormService.deleteReportForm(reportFormId);
		} catch (DDDException e)
		{
			throw e;
		}
		
	}
	
	public ReportForm updateReportForm(ReportForm reportForm)
	{
		try
		{
			ReportForm updateReportForm = this.reportFormService.updateReportForm(reportForm);
			return updateReportForm;
		} catch (DDDException e)
		{
			throw e;
		}
	}
	
	public ReportForm findReportFormById(Long reportFormId)
	{
		try
		{
			ReportForm findReportForm = this.reportFormService.findReportFormById(reportFormId);
			return findReportForm;
		} catch (DDDException e)
		{
			throw e;
		}
	}
	
	public EntitySet<ReportForm> findAllReportForm()
	{
		try
		{
			EntitySet<ReportForm> allReportForm = this.reportFormService.findAllReportForm();
			return allReportForm;
		} catch (DDDException e)
		{
			throw e;
		}
	}
	
	public Report generateExcel(Map<String, Object> params, String modelFileKey, HttpServletResponse response) throws Exception
	{
		try
		{
			//调用接口
			ReportFormOutInterFace expInterFace = null;
			try
			{
				expInterFace = (ReportFormOutInterFace) SpringContextUtil.getBean("incuExpImplement");
				if(expInterFace !=  null){
					expInterFace.beforeExport(params, modelFileKey);
				}
			} catch (Exception e)
			{
				// 
			}
			
			String templateFileName = this.findAttachmentFilePath(modelFileKey, Arrays.asList("xls", "xlsx"));
			if (templateFileName != null)
			{
				ModelFile modelFile = this.modelFileService.findModelFileByKey(modelFileKey);
				
				String _expName = null;
				if("false".equals(modelFile.getIsDefaultExpName())){
					String temp = (String)params.get("expName_");
					if(temp == null || "".equals(temp)){
						throw new DDDException(modelFile.getName() + "在导出时没有传递名为expName_的导出文件名！");
					}
					_expName = temp;
				}else{
					_expName = modelFile.getName();
				}
				
				if(_expName == null || "".equals(_expName)){
					_expName = "exportReport";
				}
				if(params == null){
					params = new HashMap<String,Object>();
				}
				params.put("_expName", _expName);
				
				TemplateGenerator generator = new JxlsGenerator();
				generator.generate(templateFileName, params, response);
			}
			if(expInterFace !=  null){
				expInterFace.afterExport(params, modelFileKey);
			}
		} catch (Exception e)
		{
			throw e;
		}
		return new Report();
	}
	
	public String reportFormPreviewWithChart(Map<String, Object> params, String modelFileKey, HttpServletResponse response)
			throws Exception
	{
		try
		{
			String templateFileName = this.findAttachmentFilePath(modelFileKey, Arrays.asList("xls", "xlsx"));
			if (templateFileName != null)
			{
				return this.reportFormService.excel2Html(templateFileName, params);
			} else
			{
				return "";
			}
		} catch (Exception e)
		{
			throw e;
		}
	}
	
	public Map<String, String> reportFormsPreviewWithChart(Map<String, Object> params, Map<String, String> modelFileKeys,
			HttpServletResponse response) throws Exception
	{
		try
		{
			Map<String, String> modelFileKeyAndTemplatePath = new HashMap<String, String>();
			Set<String> set = modelFileKeys.keySet();
			Iterator<String> ite = set.iterator();
			while (ite.hasNext())
			{
				String modelFileKey = ite.next();
				String templateFileName = this.findAttachmentFilePath(modelFileKey, Arrays.asList("xls", "xlsx"));
				if (templateFileName != null)
				{
					modelFileKeyAndTemplatePath.put(modelFileKey, templateFileName);
				} else
				{
					throw new DDDException("模板文件key " + modelFileKey + "没有找到对应的xls 或 xlsx文件，请上传改模板文件的附件");
				}
			}
			return this.reportFormService.excel2Html(modelFileKeyAndTemplatePath, params);
			// this.reportFormService.excel2Html(templateFileNames,params);
		} catch (Exception e)
		{
			throw e;
		}
	}
	
	public Report reportFormPreview(Map<String, Object> params, String modelFileKey, HttpServletResponse response) throws Exception
	{
		try
		{
			String templateFileName = this.findAttachmentFilePath(modelFileKey, Arrays.asList("xls", "xlsx"));
			if (templateFileName != null)
			{
				TemplateGenerator generator = new JxlsGenerator();
				generator.generateHtml(templateFileName, params, response);
			}
		} catch (Exception e)
		{
			throw e;
		}
		return new Report();
	}
	
	public void generateExcelReportForm(Map<String, Object> params, String modelFileKey, HttpServletResponse response) throws Exception
	{
		try
		{
			String templateFileName = this.findAttachmentFilePath(modelFileKey, Arrays.asList("docx"));
			if (templateFileName != null)
			{
				TemplateGenerator generator = new Docx4jGenerator();
				generator.generatePdf(templateFileName, params, response);
			}
		} catch (Exception e)
		{
			throw e;
		}
		
	}
	
	public Report generateDocxReportForm(Map<String, Object> params, String modelFileKey, HttpServletResponse response) throws Exception
	{
		try
		{
			
			//调用接口
			ReportFormOutInterFace expInterFace = (ReportFormOutInterFace) SpringContextUtil.getBean("incuExpImplement");
			if(expInterFace !=  null){
				expInterFace.beforeExport(params, modelFileKey);
			}
			
			String templateFileName = this.findAttachmentFilePath(modelFileKey, Arrays.asList("docx"));
			if (templateFileName != null)
			{
				ModelFile modelFile = this.modelFileService.findModelFileByKey(modelFileKey);
				String _expName = null;
				if("false".equals(modelFile.getIsDefaultExpName())){
					String temp = (String)params.get("expName_");
					if(temp == null || "".equals(temp)){
						throw new DDDException(modelFile.getName() + "在导出时没有传递名为expName_的导出文件名！");
					}
					_expName = temp;
				}else{
					_expName = modelFile.getName();
				}
				if(_expName == null || "".equals(_expName)){
					_expName = "exportReport";
				}
				if(params == null){
					params = new HashMap<String,Object>();
				}
				params.put("_expName", _expName);
				
				
				TemplateGenerator generator = new Docx4jGenerator();
				generator.generate(templateFileName, params, response);
			}
			if(expInterFace !=  null){
				expInterFace.afterExport(params, modelFileKey);
			}
		} catch (Exception e)
		{
			throw e;
		}
		return new Report();
	}
	
	public Map<String, Object> getReportFormQueryData(String modelFileKey, Map<String, Object> params)
	{
		if (params == null)
		{
			params = new HashMap<String, Object>();
		}
		try
		{
			String templatePath = this.findAttachmentFilePath(modelFileKey, Arrays.asList("docx", "xls", "xlsx"));
			return this.reportFormService.getReportFormQueryData(templatePath, params);
		} catch (Exception e)
		{
			throw new DDDException("查找" + modelFileKey + "的附件出错");
		}
		
	}
	
	public String findAttachmentFilePath(String modelFileKey, List<String> Types)
	{
		
		String templateFileName = "";
		
		ModelFile modelFile = this.modelFileService.findModelFileByKey(modelFileKey);
		EntitySet<Attachment> attachments = this.attachmentService.findAttachmentByForm(modelFile.getAttachmentCode(), "modelFileKey");
		
		String serverAddr = this.attachmentService.getFilePathFormSystemConfig();
		
		templateFileName += serverAddr;
		
		Iterator<Attachment> ite = attachments.iterator();
		while (ite.hasNext())
		{
			Attachment attachment = ite.next();
			String fileType = FilenameUtils.getExtension(attachment.getAttachmentAddr()).toLowerCase();
			if (Types.contains(fileType))
			{
				templateFileName += attachment.getAttachmentAddr();
			}
		}
		if (!templateFileName.equals(serverAddr))
		{
			return templateFileName.replaceAll("/", "\\\\");
		}
		return null;
	}
	
}