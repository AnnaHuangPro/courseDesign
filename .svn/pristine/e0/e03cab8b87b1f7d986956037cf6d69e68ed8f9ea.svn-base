/**
* @Title: OrgDataInit.java
* @Package ddd.base.dataInit.imp
* @Description: TODO(用一句话描述该文件做什么)
* @author matao@cqrainbowsoft.com
* @date 2016年12月13日 下午2:51:56
* @version V1.0
*/
package ddd.base.dataInit.imp;

import java.io.File;
import java.util.Iterator;

import org.aspectj.util.FileUtil;
import org.springframework.web.context.ContextLoaderListener;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import ddd.base.codegenerator.generator.GenerationParameter;
import ddd.base.dataInit.DataInit;
import ddd.base.exception.DDDException;
import ddd.base.persistence.EntitySet;
import ddd.simple.entity.listview.DataSource;
import ddd.simple.entity.listview.ReportView;
import ddd.simple.entity.organization.Employee;
import ddd.simple.entity.organization.Organization;
import ddd.simple.entity.permission.Module;
import ddd.simple.entity.permission.Permission;
import ddd.simple.entity.permission.Role;
import ddd.simple.entity.tree.ViewTree;
import ddd.simple.service.listview.DataSourceService;
import ddd.simple.service.listview.ReportViewService;
import ddd.simple.service.permission.ModuleService;
import ddd.simple.service.permission.PermissionService;
import ddd.simple.service.tree.ViewTreeService;

/**
 * 项目名称：DDD3
 * 类名称：OrgDataInit
 * 类描述：   
 * 创建人：AnotherTen
 * 创建时间：2016年12月13日 下午2:51:56
 * 修改人：胡均
 * 修改时间：2016年12月13日 下午2:51:56
 * 修改备注：   ModuleDataInit.json数据文件中的modules必须按照模块code长度排序，且code是级次的一级长度为4 ! ! !
 * @version 1.0
 * Copyright (c) 2016  DDD
 */
public class ModuleDataInit implements DataInit
{

	private String sourcePath = GenerationParameter.DATAINITSOUCE_PATH+"ModuleDataInit.json";
	private ModuleService moduleService = (ModuleService) ContextLoaderListener.getCurrentWebApplicationContext().getBean("moduleServiceBean");
	private DataSourceService dataSourceService = (DataSourceService) ContextLoaderListener.getCurrentWebApplicationContext().getBean("dataSourceServiceBean");
	private PermissionService permissionService = (PermissionService) ContextLoaderListener.getCurrentWebApplicationContext().getBean("permissionServiceBean");
	private ReportViewService reportViewService = (ReportViewService) ContextLoaderListener.getCurrentWebApplicationContext().getBean("reportViewServiceBean");
	private ViewTreeService viewTreeService = (ViewTreeService) ContextLoaderListener.getCurrentWebApplicationContext().getBean("viewTreeServiceBean");
	
	
	private Role role;//默认角色分配权限点
	@Override
	public void init()
	{
	
		// TODO Auto-generated method stub
		try
		{
			String fileContent = FileUtil.readAsString(new File(sourcePath));
			if(fileContent == null || "".equals(fileContent)){
				throw new DDDException("初始化组织机构数据错误:"+fileContent+" 文件内容为空");
			}
			JSONObject json = JSONObject.parseObject(fileContent);
			JSONArray modules = JSONArray.parseArray(String.valueOf(json.get("modules")));
			EntitySet<Module> allModule = new EntitySet<Module>();
			//保存所有模块
			for(int i = 0 ;i<modules.size();i++){
				Module module = JSONObject.parseObject(String.valueOf(modules.get(i)),Module.class);
				module = this.moduleService.saveModule(module);
				
				EntitySet<Permission> permissions = module.getPermissions();
				if(permissions != null && permissions.size() > 0){
					Iterator<Permission> perIte = permissions.iterator();
					while(perIte.hasNext()){
						Permission permission = perIte.next();
						permission.setModule(module);
					}
					permissions = this.permissionService.savePermissions(permissions);
					this.permissionService.savePermissionsByRole(role.getEId(), module.getEId(), permissions);
				}
				module.setPermissions(null);
				allModule.add(module);
			}
			//根据模块编码重设模块之间的级次关系
			Iterator<Module> ite  = allModule.iterator();
			while(ite.hasNext()){
				Module module = ite.next();
				String moduleCode = module.getCode();
				if(moduleCode.length() == 4){
					continue;
				}
				String parentCode = moduleCode.substring(0,moduleCode.length()-4);
				Module parent = this.moduleService.findModulesByCode(parentCode);
				module.setParent(parent);
				this.moduleService.updateModule_DataInit(module);
			}
			
			//创建数据源
			JSONArray dataSources = JSONArray.parseArray(String.valueOf(json.get("dataSources")));
			EntitySet<DataSource> allDataSource = new EntitySet<DataSource>();
			//保存所有模块
			for(int i = 0 ;i<dataSources.size();i++){
				DataSource dataSource = JSONObject.parseObject(String.valueOf(dataSources.get(i)),DataSource.class);
				dataSource = this.dataSourceService.saveDataSource(dataSource);
				allDataSource.add(dataSource);
			}
			
			//创建视图
			JSONArray reportViews = JSONArray.parseArray(String.valueOf(json.get("reportViews")));
			EntitySet<ReportView> allReportView = new EntitySet<ReportView>();
			for(int i = 0 ;i<reportViews.size();i++){
				ReportView reportView = JSONObject.parseObject(String.valueOf(reportViews.get(i)),ReportView.class);
				DataSource dataSource = this.dataSourceService.findDataSourceByCode(reportView.getDataSourceCode());
				reportView.setDataSource(dataSource);
				this.reportViewService.addReportView(reportView);
			}
			
			//创建树形结构
			JSONArray viewTrees = JSONArray.parseArray(String.valueOf(json.get("viewTrees")));
			for(int i = 0 ;i<viewTrees.size();i++){
				ViewTree viewTree = JSONObject.parseObject(String.valueOf(viewTrees.get(i)),ViewTree.class);
				this.viewTreeService.saveViewTree(viewTree);
			}
		} catch (Exception e)
		{
			e.printStackTrace();
			System.out.println("初始化组织机构数据错误");
		}
	
	}
	
	@Override
	public void initParam(Organization organization, Role role,Employee employee)
	{
		this.role = role;
	}
	@Override
	public Role getRole()
	{
		return null;
	}
	@Override
	public Organization getOrganization()
	{
		return null;
	}
	@Override
	public Employee getEmployee()
	{
		return null;
	}
	
}
